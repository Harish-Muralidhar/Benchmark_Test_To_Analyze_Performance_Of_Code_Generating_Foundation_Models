'''

(4, 3, 2, 1) -> (4, 3) -> (4)


(3, 4, 2, 1) -> (3, 4) -> (4)


(4, 2, 1, 3) -> (4, 1) -> (4)


(2, 1, 4, 3) -> (1, 4) -> (4)


(1, 3, 2, 4) -> (1, 2) -> (2)


(2, 4, 1, 3) -> (2, 1) -> (2)


(1, 4, 3, 2) -> (1, 3) -> (3)


(3, 2, 1, 4) -> (3, 1) -> (3)


(3, 1, 2, 4) -> (3, 2) -> (3)


(2, 3, 4, 1) -> (2, 4) -> (4)


(4, 2, 3, 1) -> (4, 2) -> (4)


(2, 3, 1, 4) -> (2, 1) -> (2)


(1, 3, 4, 2) -> (1, 4) -> (4)


(4, 1, 2, 3) -> (4, 1) -> (4)


(1, 2, 4, 3) -> (1, 2) -> (2)


(2, 4, 3, 1) -> (2, 3) -> (3)


(3, 4, 1, 2) -> (3, 4) -> (4)


(4, 3, 1, 2) -> (4, 3) -> (4)


(3, 1, 4, 2) -> (3, 1) -> (3)


(1, 4, 2, 3) -> (1, 2) -> (2)


(2, 1, 3, 4) -> (2, 3) -> (3)




'''


from math import factorial
import numpy as np

def tournament(k):
	fact = np.array([factorial(i) for i in range(1, 2**k+1)])
	a = np.zeros((2**k, 2**k))
	a[0][0]=1
	#print(a)
	for i in range(1,2**k):
		for j in range(i+1):
			a[i][j] = (a[i-1][j]*(j+1))%998244353
			if j-1>=0:
				a[i][j] = (a[i][j]+a[i-1][j-1]*(i-j))%998244353
			#print(a)
	return a
		
def winner(a,k):
	w = np.zeros((2**k, 2**k))
	for i in range(2**k):
		for j in range(2**k):
			if i==j:
				w[i][j] = 1
			else:
				w[i][j] = 0
	#print(w)
	for i in range(1,k):
		t = np.zeros((2**k, 2**k))
		for j in range(2**(k-i)):
			for l in range(2**i):
				for m in range(2**i):
					t[2*j+l][2*j+m] = (t[2*j+l][2*j+m] + w[2*j+l][2*j+l]*w[2*j+m][2*j+m])%998244353
					t[2*j+l][2*j+m] = (t[2*j+l][2*j+m] + w[2*j+l][2*j+m]*w[2*j+m][2*j+l])%998244353
					t[2*j+l][2*j+m] = (t[2*j+l][2*j+m] + w[2*j+l][2*j+m]*w[2*j+l][2*j+l])%998244353
					t[2*j+l][2*j+m] = (t[2*j+l][2*j+m] + w[2*j+l][2*j+l]*w[2*j+m][2*j+m])%998244353
		w = t
		#print(w)
	return w
	
def solution(k):
	a = tournament(k)
	w = winner(a,k)
	#print(a)
	#print(w)
	for i in range(2**k):
		for j in range(2**k):
			w[i][j] = (w[i][j]*a[k-1][j])%998244353
	return w
	
k = int(input())
w = solution(k)
for i in range(2**k):
	print(int(w[i][0]), end = ' ')
	
'''
2
0 8 16 24
3
0 8 16 24 24 16 8 0 
4
0 8 16 24 32 32 24 16 8 0 8 16 24 32 32 24 16 8 0 
5
0 8 16 24 32 32 32 32 24 24 24 24 16 16 16 16 8 8 8 8 0 8 16 24 32 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 32 32 32 32 32 32 32 32 24 24 24 24 24 24 24 24 16 16 16 16 16 16 16 16 8 8 8 8 8 8 8 8 0 8 16 24 32 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 0 
'''